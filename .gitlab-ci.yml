stages:
  - maven-package
  - kaniko-build


variables:
  MAVEN_CLI_OPTS: "--no-transfer-progress"
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -DproxySet=true -DproxyHost=chckproxy.raiffeisenbank.com.ua -DproxyPort=8080"
  HTTP_PROXY: http://chckproxy.raiffeisenbank.com.ua:8080
  NO_PROXY: "otpbank.com.ua,raiffeisenbank.com.ua,localhost"


maven-package:
  image: openjdk:11
  stage: maven-package
  before_script:
    - echo -n "$SSL_CHAIN" | base64 -d > /usr/local/share/ca-certificates/cert.crt && update-ca-certificates
    - keytool -importcert -file /usr/local/share/ca-certificates/cert.crt -alias ca_certs -keystore $JAVA_HOME/lib/security/cacerts -storepass changeit -noprompt
    - 'echo "cafile: \"/usr/local/share/ca-certificates/cert.crt\"" > ~/.yarnrc'
    - chmod +x mvnw
  script:
    - ./mvnw $MAVEN_CLI_OPTS clean package -DskipTests
  cache:
    paths:
      - .m2/repository
    key: $CI_BUILD_REF_NAME
  artifacts:
    paths:
      - downloader/target/*.jar
      - importer/target/*.jar
      - notification/target/*.jar
      - pipeline/target/*.jar
      - scheduler/target/*.jar
      - scheduler_test/target/*.jar
      - web/target/*.jar
  when: manual


kaniko-build:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  stage: kaniko-build
  dependencies:
    - maven-package
  before_script:
    - echo "{\"auths\":{\"$NEXUS_URL\":{\"auth\":\"$(printf "%s:%s" "$NEXUS_USER" "$NEXUS_PASS" | base64 | tr -d '\n')\"}}}" >> /kaniko/.docker/config.json
    - echo "{\"proxies\":{\"default\":{\"httpProxy\":\"$HTTP_PROXY\",\"httpsProxy\":\"$HTTP_PROXY\",\"noProxy\":\"$NO_PROXY\"}}}"  >> /kaniko/.docker/config.json
    - echo -n "$SSL_CHAIN" | base64 -d >> /kaniko/ssl/certs/ca-certificates.crt
  script:
    - >-
      for file in $(find . -type f -regex '.*target/.*\.jar'); do
        echo $file
        filename=$(echo $file | rev | cut -d'/' -f1 | rev | cut -d'-' -f1)
        version=$(echo $file | rev | cut -d'/' -f1 | rev | cut -d'-' -f2)
        /kaniko/executor \
        --context . \
        --dockerfile $CI_PROJECT_DIR/Dockerfile \
        --destination "$NEXUS_URL/$filename:$version" \
        --build-arg JAR_FILE=$file \
        --build-arg http_proxy=$HTTP_PROXY \
        --build-arg https_proxy=$HTTPS_PROXY || continue
        echo "Image $filename:$version pushed!"
      done
  when: manual
